; Escopo I
; AssemblerApplication1.asm
;
; Created: 18/11/2024 16:53:11
; Author : PC
;


; Replace with your application code
.def flag = r16
.def aux = r17
.def limite = r18
.def valor = r19
.def contador = r20

inicio:
ldi aux,0x1b					;carrega o valor de ESC no registrador aux (r17)
sts 0x200,aux					;armazena o valor ESC (que está no registrador aux) no endereço de memória 
ldi aux,0x20					;carrega o valor do espaço em branco no registrador aux
sts 0x201,aux					;armazena o valor do espaço em branco (que está no registrador aux) no endereço de memória 
ldi valor,0x41					;armazena o valor 41 (A em hexadecimal na tabela ASCII) no registrador valor (r19)
ldi limite,0x1a					;armazena o valor 1a (26 em decimal, cobre todas as letras do alfabeto) no registrador limite (r18)

ldi r27,0x02 
ldi r26,0x02					;o ponteiro x começará a partir do endereço de memória 0x202

loop_maiusculas: inc contador	;incrementa o registrador contador (r20) em 1
st x,valor						;armazena o valor do registrador valor (r19) (41, A em hexadecimal na tabela ASCII) no endereço 0x202
inc valor						;incrementa o valor do registrador valor (r19) (42, B em hexadecimal na tabela ASCII) em 1
inc r26							;incrementa o valor do registrador r26 em 1 (assim o endereço de memória do ponteiro x será 0x203)
cp contador,limite				;compara o registrador contador (r20) (atualmente 1) com o registrador limite (r18) (26)
brne loop_maiusculas			;continua o loop se o registrador contador (r20) não ficou igual ao registrador limite (r18) (26)

ldi contador,0					;o valor do registrador contador (r20) será 0
ldi valor,0x61					;armazena o valor 61 (a em hexadecimal na tabela ASCII) no registrador valor (r19)

loop_minusculas: inc contador	;incrementa o registrador contador (r20) em 1
st x,valor						;armazena o valor do registrador valor (r19) (61, a em hexadecimal na tabela ASCII) no endereço 0x21C
inc valor						;incrementa o valor do registrador valor (r19) (62, b em hexadecimal na tabela ASCII) em 1
inc r26							;incrementa o valor do registrador r26 em 1 (assim o endereço de memória do ponteiro x será 0x21D)
cp contador,limite				;compara o registrador contador (r20) (atualmente 1) com o registrador limite (r18) (26)
brne loop_minusculas			;continua o loop se o registrador contador (r20) não ficou igual ao registrador limite (r18) (26)

ldi contador,0					;o valor do registrador contador (r20) será 0
ldi valor,0x30					;armazena o valor 30 (0 em hexadecimal na tabela ASCII) no registrador valor (r19)
ldi flag,0xA					;armazena o valor A (10 em decimal, cobre todos os números de 0 á 10) no registrador flag (r16)

loop_digitos: inc contador		;incrementa o registrador contador (r20) em 1
st x,valor						;armazena o valor do registrador valor (r19) (30, 0 em hexadecimal na tabela ASCII) no endereço 0x236
inc valor						;incrementa o valor do registrador valor (r19) (31, 1 em hexadecimal na tabela ASCII) em 1
inc r26							;incrementa o valor do registrador r26 em 1 (assim o endereço de memória do ponteiro x será 0x237)
cp contador,flag				;compara o registrador contador (r20) (atualmente 1) com o registrador flag (r16) (10)
brne loop_digitos				;continua o loop se o registrador contador (r20) não ficou igual ao registrador flag (r16) (10)
